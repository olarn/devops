name: Docker Image CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  pull_request_target:
    branches:
      - main

env:
  img-tag: '${{ github.sha }}'

jobs:
  build:
    permissions:
      checks: write
      pull-requests: write
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Set variable
        id: img-tag
        run: |
          context.setContext('img-tag', $(date +%s))

      - uses: actions/checkout@v4
      - uses: ArtiomTr/jest-coverage-report-action@v2

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '19.x'

      - name: Install dependencies
        run: npm ci

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ vars.DOCKER_IMAGE_NAME }}:${{ env.img-tag }}

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ vars.DOCKER_IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.img-tag }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Pull Docker image
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ vars.SERVER_NAME }} 'sudo docker pull ${{ vars.DOCKER_IMAGE_NAME }}:${{ env.img-tag }}'

      - name: Stop running container
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ vars.SERVER_NAME }} 'sudo docker stop express-app || true'
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ vars.SERVER_NAME }} 'sudo docker rm express-app || true'

      - name: Run new container
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ vars.SERVER_NAME }} 'sudo docker run -d --name express-app -p 80:3000 ${{ vars.DOCKER_IMAGE_NAME }}:${{ env.img-tag }}'
